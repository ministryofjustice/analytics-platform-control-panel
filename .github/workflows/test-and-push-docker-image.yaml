name: Run tests and push Docker image on success

"on":
  push:
    branches: [main]
  pull_request:

jobs:
  test-js:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install JavaScript dependencies
        run: npm install

      - name: Run JavaScript tests
        run: npm run test -- --coverage --collectCoverage=true

  test-and-push-docker:
    runs-on: [self-hosted, ecr]
    needs: [test-js]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: docker context use builders || docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Prep Tags
        id: prep
        run: |
          TAG=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            TAG=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$TAG" ]; then
              TAG=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            TAG=pr-${{ github.event.number }}
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAG="sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build image
        run: make build
        env:
          NETWORK: host
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.prep.outputs.tag }}

      - name: Run Python tests (docker-compose)
        run: make clean && make test
        env:
          NETWORK: default
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.prep.outputs.tag }}

      - name: Push image
        run: make push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.prep.outputs.tag }}

      - name: Push Docker image to Quay.io
        env:
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
          IMAGE_TAG: ${{ steps.prep.outputs.tag }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker login -u ${QUAY_USERNAME} -p ${QUAY_PASSWORD} quay.io
          docker tag "${REGISTRY}/control-panel:${IMAGE_TAG}" "quay.io/mojanalytics/control-panel:${IMAGE_TAG}"
          docker push "quay.io/mojanalytics/control-panel:${IMAGE_TAG}"
