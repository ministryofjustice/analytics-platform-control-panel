name: Run tests and push Docker image on success

"on":
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

permissions: {}

jobs:
  test-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: docker context use builders || docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Log in to GitHub Container Registry
        id: ghcr_login
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install Docker Compose
        id: docker-compose
        shell: bash
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Prep Tags
        id: prep
        run: |
          TAG=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            TAG="sha-${GITHUB_SHA::8}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAG="sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build image
        run: make build
        env:
          NETWORK: host
          IMAGE_TAG: ${{ steps.prep.outputs.tag }}

      - name: Run Python tests (docker-compose)
        run: make clean && make test
        env:
          NETWORK: default
          IMAGE_TAG: ${{ steps.prep.outputs.tag }}

      - name: Push image
        run: make push
        env:
          IMAGE_TAG: ${{ steps.prep.outputs.tag }}