# Generated by Django 2.2.4 on 2019-08-28 10:34

import json
import os
import secrets

from django.conf import settings
from django.db import migrations


TOOLS = [
    {
        'chart_name': 'rstudio',
        'version': '2.1.1',
        'name': 'RStudio',
        'description': 'RStudio: 1.2.1335+conda, R: 3.5.1, Python: 3.7.1, patch: 3',
        'values': {
            'authProxy.cookieSecret': '<SECRET_TOKEN>',
            'authProxy.auth0.domain': '%(domain)s',
            'authProxy.auth0.clientId': '%(client_id)s',
            'authProxy.auth0.clientSecret': '%(client_secret)s',
            'rstudio.secureCookieKey': '<SECRET_TOKEN>',
        },
    },
    {
        'chart_name': 'jupyter-lab',
        'version': '0.4.3',
        'name': 'Jupyter Lab',
        'description': 'v0.6.7',
        'values': {
            'authProxy.auth0_domain': '%(domain)s',
            'authProxy.auth0_client_id': '%(client_id)s',
            'authProxy.auth0_client_secret': '%(client_secret)s',
            'cookie_secret': '<SECRET_TOKEN>',
        },
    },
    {
        'chart_name': 'airflow-sqlite',
        'version': '0.2.2',
        'name': 'Airflow',
        'description': '1.10.3',
        'values': {
            'airflow.secretKey': settings.AIRFLOW_SECRET_KEY,
            'airflow.fernetKey': settings.AIRFLOW_FERNET_KEY,
            'authProxy.auth0_domain': '%(domain)s',
            'authProxy.auth0_client_id': '%(client_id)s',
            'authProxy.auth0_client_secret': '%(client_secret)s',
            'cookie_secret': '<SECRET_TOKEN>',
        },
    },
]


def initialize_tools(apps, schema_editor):
    Tool = apps.get_model('api', 'Tool')

    for metadata in TOOLS:
        conf = settings.TOOLS[metadata['chart_name']]
        for key, value in metadata['values'].items():
            if isinstance(value, str):
                metadata['values'][key] = value % conf
        tool, created = Tool.objects.get_or_create(
            chart_name=metadata['chart_name'],
            version=metadata['version'],
        )
        tool.name = metadata['name']
        tool.description = metadata['description']
        tool.values = metadata['values']
        tool.save()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0009_tool'),
    ]

    operations = [
        migrations.RunPython(initialize_tools, migrations.RunPython.noop),
    ]
